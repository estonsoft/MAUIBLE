// Warning: Some assembly references could not be resolved automatically. This might lead to incorrect decompilation of some parts,
// for ex. property getter/setter access. To get optimal decompilation results, please manually add the missing references to the list of loaded assemblies.
// MTUSDKNET, Version=1.1.9.0, Culture=neutral, PublicKeyToken=null
// MTUSDKNET.MMXVirtualDevice
using System;
using System.Threading.Tasks;



public class MMXVirtualDevice
{
	protected MMXConnectionState mState;

	private const string StartMSRTransactionRequest = "AAFF810401001001840A100181013C8203010000";

	private const string StartMSRTransactionResponse = "AAFF810482001001A206810100820101";

	private const string MSRNotification = "AAFF81048300100183050010010101";

	private const string MSRRequest = "AAFF81040100101084021010";

	private const string MSRResponse = "AAFF810482001010A2068101008201008482009F1010820400010000A4820093810400010100A4820089A04C81040100078084442542353535353535353535353535343434345E564953412F4155544F4D4154494F4E205E313930363130313036303836303030303030303030303637383030303030303FA02F81040200058084273B353535353535353535353535343434343D31393036313031303630383630303036373830303FA0088104030100808400";

	private const string StartEMVTransactionRequest = "AAFF810401001001840A100181013C8203070000";

	private const string ARQCNotification = "AAFF810483000803820410040501";

	private const string ARQCQuickChipNotification = "AAFF810483000805820410040501";

	private const string BatchNotification = "AAFF810483000805820410040301";

	private const string GetDataMSRRequest = "AAFF81040100101084051010810101";

	private const string GetDataARQCRequest = "AAFF81040100101084051010810102";

	private const string GetDataBatchRequest = "AAFF81040100101084051010810103";

	private const string ARQCResponse

	private const string BatchResponse

	public bool isOpen => mState == MMXConnectionState.Connected;

	public event EventHandler<byte[]> onMessage;

	public event EventHandler<MMXConnectionState> onConnectionStateChanged;

	public void initialize()
	{
	}

	public void setConnectionType(MMXConnectionType ConnectionType)
	{
	}

	public void open(string DeviceName = "")
	{
		try
		{
			MService_onConnectionChanged(this, MMXConnectionState.Connecting);
			MService_onConnectionChanged(this, MMXConnectionState.Connected);
		}
		catch (Exception)
		{
		}
	}

	private void MService_onConnectionChanged(object sender, MMXConnectionState e)
	{
		this.onConnectionStateChanged?.Invoke(this, e);
	}

	public void close()
	{
		try
		{
			MService_onConnectionChanged(this, MMXConnectionState.Disconnecting);
			MService_onConnectionChanged(this, MMXConnectionState.Disconnected);
		}
		catch (Exception)
		{
		}
	}

	public void sendMessage(MMXMessage message)
	{
		try
		{
			string hexString = TLVParser.getHexString(message.getData());
			if ("AAFF810401001001840A100181013C8203010000".CompareTo(hexString) == 0)
			{
				OnMessageReceived(this, TLVParser.getByteArrayFromHexString("AAFF810482001001A206810100820101"));
				OnMessageReceived(this, TLVParser.getByteArrayFromHexString("AAFF81048300100183050010010101"));
			}
			else if ("AAFF81040100101084021010".CompareTo(hexString) == 0)
			{
				OnMessageReceived(this, TLVParser.getByteArrayFromHexString("AAFF810482001010A2068101008201008482009F1010820400010000A4820093810400010100A4820089A04C81040100078084442542353535353535353535353535343434345E564953412F4155544F4D4154494F4E205E313930363130313036303836303030303030303030303637383030303030303FA02F81040200058084273B353535353535353535353535343434343D31393036313031303630383630303036373830303FA0088104030100808400"));
			}
			else if ("AAFF810401001001840A100181013C8203070000".CompareTo(hexString) == 0)
			{
				OnMessageReceived(this, TLVParser.getByteArrayFromHexString("AAFF810483000805820410040501"));
				OnMessageReceived(this, TLVParser.getByteArrayFromHexString("AAFF810483000805820410040301"));
			}
			else if ("AAFF81040100101084051010810101".CompareTo(hexString) == 0)
			{
				OnMessageReceived(this, TLVParser.getByteArrayFromHexString("AAFF810482001010A2068101008201008482009F1010820400010000A4820093810400010100A4820089A04C81040100078084442542353535353535353535353535343434345E564953412F4155544F4D4154494F4E205E313930363130313036303836303030303030303030303637383030303030303FA02F81040200058084273B353535353535353535353535343434343D31393036313031303630383630303036373830303FA0088104030100808400"));
			}
			else if ("AAFF81040100101084051010810102".CompareTo(hexString) == 0)
			{
				OnMessageReceived(this, TLVParser.getByteArrayFromHexString
			}
			else if ("AAFF81040100101084051010810103".CompareTo(hexString) == 0)
			{
				OnMessageReceived(this, TLVParser.getByteArrayFromHexString
			}
		}
		catch (Exception)
		{
		}
	}

	internal void OnMessageReceived(object sender, byte[] data)
	{
		this.onMessage?.Invoke(this, data);
	}

	public byte[] SendAndReceive(byte[] data, int TimeOut = 1000)
	{
		TaskCompletionSource<byte[]> completeBytes = new TaskCompletionSource<byte[]>();
		EventHandler<byte[]> value = delegate(object o, byte[] d)
		{
			completeBytes.TrySetResult(d);
		};
		onMessage += value;
		try
		{
			sendMessage(new MMXMessage(48, data));
			completeBytes.Task.Wait(TimeOut);
			if (completeBytes.Task.IsCompleted)
			{
				return completeBytes.Task.Result;
			}
		}
		finally
		{
			onMessage -= value;
		}
		return null;
	}
}
